================================Question===============================================================
Topic: Core JavaScript Concepts Review
Based on the provided study notes, demonstrate your understanding of the following key JavaScript concepts. 
For each section, provide a clear explanation and a simple code example where appropriate.
1. Data Structures: Maps
What is a JavaScript Map? How is it defined as a collection of key:value pairs?
Provide a code example that creates a new Map, adds two key-value pairs to it, and then retrieves one of the values using its key.
2. String Manipulation & Regular Expressions
Explain the difference between the String.prototype.replace() method and the String.prototype.replaceAll() method.
What do the following regular expression (regex) flags mean?
i
g
gi

Write a code example that uses replace() with a regex to replace all case-insensitive occurrences of the word "test" with "review" in a given string.
3. DOM Selectors
Briefly describe the purpose of the following five DOM selection methods:
getElementById()
getElementsByClassName()
getElementsByTagName()
querySelector()
querySelectorAll()
4. Asynchronous JavaScript
What is the primary purpose of setTimeout()?
In your own words, what is a Promise?
How do the async and await keywords help in working with Promises?
Write a simple code example that creates a function that returns a Promise which resolves after 2 seconds using setTimeout. 
Then, use an async function with await to call this function and get the result.

=====================================Solution============================================================================

// --- 1. Data Structures: Maps ---

// Explanation: A JavaScript `Map` is a built-in data structure that holds key-value pairs.
// It allows keys of any data type and maintains insertion order.

// Code Example:
const userRoles = new Map();

// Add key-value pairs using .set(key, value)
userRoles.set('Alice', 'Admin');
userRoles.set('Bob', 'Editor');

// Retrieve a value using .get(key)
console.log("--- Section 1: Maps ---");
console.log(`Bob's role is: ${userRoles.get('Bob')}`);
console.log(`The map size is: ${userRoles.size}`);


// --- 2. String Manipulation & Regular Expressions ---

/*
Explanation:
- `replace()`: Replaces only the first occurrence of a string, or all occurrences if used with a global /g regex.
- `replaceAll()`: Replaces all occurrences of a string without needing a regex.

Regex Flags:
- i: Case-Insensitive
- g: Global (find all matches)
- gi: Global and Case-Insensitive
*/

// Code Example:
const sentence = "This is a test. Let's test again. TEST one more time.";
const updatedSentence = sentence.replace(/test/gi, "review");

console.log("\n--- Section 2: String/Regex ---");
console.log(updatedSentence);


// --- 3. DOM Selectors ---

/*
Explanation: The following are methods to select HTML elements.
They will not produce output in Node.js because there is no HTML document (DOM).
- `getElementById(id)`: Selects a single element by its unique `id`.
- `getElementsByClassName(name)`: Selects all elements with a given class.
- `getElementsByTagName(name)`: Selects all elements with a given tag.
- `querySelector(selector)`: Selects the first element matching a CSS selector.
- `querySelectorAll(selector)`: Selects all elements matching a CSS selector.
*/
console.log("\n--- Section 3: DOM Selectors ---");
console.log("DOM selector methods are for browser environments, not Node.js.");


// --- 4. Asynchronous JavaScript ---

/*
Explanation:
- `setTimeout()`: Executes a function after a specified delay.
- `Promise`: An object representing the eventual result of an async operation.
- `async/await`: Syntax to make asynchronous code look more synchronous.
*/

// Code Example:
// 1. Create a function that returns a Promise
function fetchData() {
  return new Promise(resolve => {
    // Simulate a network request with a 2-second delay
    setTimeout(() => {
      resolve("Data has been fetched successfully!");
    }, 2000);
  });
}

// 2. Create an async function to consume the Promise
async function processData() {
  console.log("\n--- Section 4: Async/Await ---");
  console.log("Starting data fetch...");
  // Use 'await' to pause the function until fetchData's Promise resolves
  const data = await fetchData();
  console.log(data); // This line will run after the 2-second delay
  console.log("Processing complete.");
}

// 3. Call the async function
processData();
