================================Question===============================================================
Topic: Core JavaScript Concepts Review
Based on the provided study notes, demonstrate your understanding of the following key JavaScript concepts. 
For each section, provide a clear explanation and a simple code example where appropriate.
1. Data Structures: Maps
What is a JavaScript Map? How is it defined as a collection of key:value pairs?
Provide a code example that creates a new Map, adds two key-value pairs to it, and then retrieves one of the values using its key.
2. String Manipulation & Regular Expressions
Explain the difference between the String.prototype.replace() method and the String.prototype.replaceAll() method.
What do the following regular expression (regex) flags mean?
i
g
gi

Write a code example that uses replace() with a regex to replace all case-insensitive occurrences of the word "test" with "review" in a given string.
3. DOM Selectors
Briefly describe the purpose of the following five DOM selection methods:
getElementById()
getElementsByClassName()
getElementsByTagName()
querySelector()
querySelectorAll()
4. Asynchronous JavaScript
What is the primary purpose of setTimeout()?
In your own words, what is a Promise?
How do the async and await keywords help in working with Promises?
Write a simple code example that creates a function that returns a Promise which resolves after 2 seconds using setTimeout. 
Then, use an async function with await to call this function and get the result.

=====================================Solution============================================================================

1. Data Structures: Maps
Explanation: A JavaScript Map is a built-in data structure that holds key-value pairs, similar to an object. However, unlike plain objects where keys are implicitly converted to strings, a Map allows keys of any data type (including objects, functions, and primitives). It also maintains the insertion order of its elements and provides useful methods like .set(), .get(), .has(), and .delete(), and a .size property.
Code Example:

// Create a new Map
const userRoles = new Map();

// Add key-value pairs using .set(key, value)
userRoles.set('Alice', 'Admin');
userRoles.set('Bob', 'Editor');

// Retrieve a value using .get(key)
console.log(`Bob's role is: ${userRoles.get('Bob')}`); // Output: Bob's role is: Editor
console.log(`The map size is: ${userRoles.size}`);   // Output: The map size is: 2

2. String Manipulation & Regular Expressions
Explanation:
String.prototype.replace(pattern, replacement): When used with a string as the pattern, this method finds and replaces only the first occurrence. To replace all occurrences, the pattern must be a regular expression with the global (g) flag.
String.prototype.replaceAll(pattern, replacement): This method was introduced to simplify replacing all occurrences of a substring without needing a regular expression. It replaces every instance of the pattern.
Regex Flags:
i: Case-Insensitive. It makes the pattern match both uppercase and lowercase letters.
g: Global. It makes the pattern find all matches in the string, not just the first one.
gi: This is a combination of both flags, meaning the search will be Global and Case-Insensitive.
Code Example:

const sentence = "This is a test. Let's test again. TEST one more time.";

// Use replace() with the /gi regex to replace all case-insensitive matches
const updatedSentence = sentence.replace(/test/gi, "review");

console.log(updatedSentence);
// Output: This is a review. Let's review again. review one more time.

3. DOM Selectors
getElementById(id): Selects a single element by its unique id. It is the fastest selector.
getElementsByClassName(name): Selects all elements that have a given CSS class name. It returns a live HTMLCollection.
getElementsByTagName(name): Selects all elements with the specified tag name (e.g., 'p', 'div'). It returns a live HTMLCollection.
querySelector(selector): Selects the first element that matches a specified CSS selector (e.g., '#myId', '.myClass', 'div p'). It is very versatile.
querySelectorAll(selector): Selects all elements that match a specified CSS selector. It returns a static NodeList.

4. Asynchronous JavaScript
setTimeout(): A web API that allows you to execute a function or a piece of code after a specified delay (in milliseconds). It is a fundamental tool for introducing delays and managing asynchronous tasks.
Promise: A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It exists in one of three states: pending, fulfilled (successful), or rejected (failed). It helps avoid "callback hell" by allowing you to chain asynchronous actions cleanly.
async and await: These are keywords that provide "syntactic sugar" over Promises, making asynchronous code look and behave more like synchronous code.
async: When placed before a function declaration, it makes the function implicitly return a Promise.
await: Can only be used inside an async function. It pauses the execution of the async function until the Promise it is waiting on is settled (either fulfilled or rejected).
Code Example:

// 1. Create a function that returns a Promise
function fetchData() {
  return new Promise(resolve => {
    // Simulate a network request with a 2-second delay
    setTimeout(() => {
      resolve("Data has been fetched successfully!");
    }, 2000);
  });
}

// 2. Create an async function to consume the Promise
async function processData() {
  console.log("Starting data fetch...");
  // Use 'await' to pause the function until fetchData's Promise resolves
  const data = await fetchData();
  console.log(data); // This line will run after the 2-second delay
  console.log("Processing complete.");
}

// 3. Call the async function
processData();
